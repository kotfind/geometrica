#set heading(numbering: "1.")

= ОБЪЕКТ ИСПЫТАНИЙ

== Наименование программы

Наименование программы --- *"Система построение геометрических чертежей со
встроенным языком программирования и возможностью удаленного программного
управления"*

Наименование программы на английском языке --- *"Geometric Drawing System with a
Built-in Programming Language and a Remote Program Control Capability"*

Краткое наименование программы --- *"Geometrica"*

== Краткая характеристика области применения программы

"Geometrica" --- это десктоп-приложение, которое позволяет пользователю
строить и изменять геометрические чертежи, используя графический интерфейс
(GUI), интерфейс командной строки (CLI) или библиотеку для языка
программирования Rust.

= ЦЕЛЬ ИСПЫТАНИЙ

Цель проведения испытаний --- установления соответствия разработанной
программной системы и программной документации требованиям, изложенными в
документе "Техническое Задание".

= ТРЕБОВАНИЯ К ПРОГРАММЕ

Далее дано краткое описание требований к программе. Более подробное описание
можно найти в документе "Техническое Задание", раздел "ТРЕБОВАНИЯ К ПРОГРАММЕ".

== Требования к функциональным характеристикам <funcs>

Программная система должна иметь следующий набор функций:
- Создать новый свободный#footnote[
        Термины *"свободный объект"* и *"зависимый объект"* описаны в документе
        "Техническое Задание".
    ] <free_dependant_object_footnote> объект

- Создать новый зависимый@free_dependant_object_footnote объект

- Изменить свободный объект

- Узнать значение объекта по его имени

- Узнать значение всех объектов

- Вычислить произвольное выражение

- Удалить объект

- Объявить новую функцию

- Изменить трансформацию

- Сохранить чертеж в файл

- Загрузить чертеж из файла

== Требования к надежности

Клиенты и сервер *не* должны аварийно завершаться ни при каких действиях
пользователя.

= ТРЕБОВАНИЯ К ПРОГРАММНОЙ ДОКУМЕНТАЦИИ <docs>

Программная документация должна включать в себя следующие документы и
соответствовать указанным ГОСТ-ам.

- "Geometrica". Описание языка. (ГОСТ 19.506-79)
- "Geometrica". Пояснительная записка (ГОСТ 19.404-79)
- "Geometrica". Программа и методика испытаний (ГОСТ 19.301-79)
- "Geometrica". Руководство оператора (ГОСТ 19.505-79)
- "Geometrica". Текст программы. (ГОСТ 19.401-78)
- "Geometrica". Техническое задание (ГОСТ 19.201-78)

= СОСТАВ И ПОРЯДОК ИСПЫТАНИЙ

Проводится два вида испытаний: автоматические и ручные. @auto_tests описывает
порядок проведения автоматических испытаний. @manual_tests описывает порядок
проведения ручных испытаний.

#block(
    stroke: 1pt + red,
    inset: 5mm,
    text(fill: red, weight: "bold")[
        ВАЖНО: Перед проведением тестов убедитесь, что крейт server установлен и
        путь до его исполняемого файла содержится в переменной окружения
        `$PATH`. Если этого не сделать, тесты не будут работать корректно.
    ],
)

== Порядок проведения автоматических испытаний <auto_tests>

Проведение автоматических испытаний достигается стандартными средствами
автоматического тестирования ЯП Rust #footnote[
    Смотри "Язык программирования Rust" от Стива Клабника и Кэрол Николс, при
    поддержке других участников сообщества Rust, гл. 11 "Написание
    автоматизированных тестов".
].

== Порядок проведения ручных испытаний <manual_tests>

Ручные испытания состоят в запуске приложения и ручной проверке его работы.

Для максимально качественной работы системы установлены следующие требования:
- Операционная система Linux#footnote[
        Разработка и тестирование проводились на
        `NixOS Unstable (rev: 42a1c96)`.
    ]
- 4Гб оперативной памяти
- 128Гб памяти на HDD или SSD
- Мышь, клавиатура, монитор

= МЕТОДЫ ИСПЫТАНИЙ

== Проверка требований к технической документации

Испытание считается пройденным, если все вышеперечисленные документы (@docs)
присутствуют в системе SmartLMS, и каждый из них соответствует указанным
выше стандартам.

== Проверка функциональных требований в автоматическом режиме

Для проверки функциональных требований в автоматическом режиме проверяется
прохождения автоматических тестов в порядке, указанном выше (@auto_tests).
Испытание считается пройденным, если все автоматические тесты завершаются с
положительным вердиктом.

== Проверка функциональных требований в ручном режиме

Для проверки функциональных требований в ручном режиме поочерёдно проверяется
выполнение всех функциональных требований (@funcs) в порядке, указанном выше
(@manual_tests).

Набор действий, необходимый для проверки каждого функционального требования,
описан в документе "Руководство пользователя", раздел "ВЫПОЛНЕНИЕ ПРОГРАММЫ".

Испытание считается пройденным, если в ответ на действия пользователя, описанные
в документе "Руководство пользователя", система выполняет соответствующие
действия, описанные в том же документе.
