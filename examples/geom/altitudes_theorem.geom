/*
   Эта программа показывает, как использовать встроенный язык программирования
   системы Geometrica и демонстрирует теорему о пересечении высот треугольника в
   одной точке.

   Некоторые функции, аналогичные встроенным, определены вручную, чтобы показать
   возможности Языка.
*/

clear!

// -------------------- Объявление вспомогательных функций --------------------

// Возвращает точку пересечения двух прямых, в том случае, если она ровно одна.
// Иначе возвращает `none pt`.
//
// Функция использует представления прямых в виде
// `ax + by + c = 0` и метод Крамера.
inter_point_ l1:line l2:line -> pt = let
        a1 = l1.a,
        b1 = l1.b,
        c1 = l1.c,
        a2 = l2.a,
        b2 = l2.b,
        c2 = l2.c,

        d  = a1 * b2 - b1 * a2,
        dx = -c1 * b2 + b1 * c2,
        dy = a1 * -c2 + c1 * a2,
    in if
        d == 0.0 then none pt,
        else (pt dx dy) / d

// Длина вектора
len_ v:pt -> real = (v.x^2.0 + v.y^2.0)^0.5

// Расстояние между двумя точками
dist_ a:pt b:pt -> real = len_ (a - b)

// Нормировка вектора
norm_ v:pt -> pt = let
        l = len_ v,
    in if
        l == 0.0 then v,
        else v / l

// Перпендикуляр к прямой через точку
//
// Перпендикуляр построен по двум точкам, расположенным на расстоянии 1.
perp_ l:line p:pt -> line = let
        l_dir = l.p2 - l.p1,
        x = l_dir.y,
        y = -l_dir.x,
        perp_dir = norm_ (pt x y),
    in
        line p (p + perp_dir)

// Перпендикуляр к прямой через точку.
//
// Перпендикуляр построен по двум точкам: данной и лежащей на прямой.
// Если точка p лежит на прямой, то возвращается `perp_ l p`.
// От altitude --- высота (треугольника).
alt_ l:line p:pt -> line = let
        unit_perp = perp_ l p,
        p2 = inter_point_ l unit_perp,
        eps_ = 1e-7,
    in if
        dist_ p2 p < eps_ then unit_perp,
        else line p p2

// -------------------- Демонстрация теоремы --------------------

// Построим треугольник ABC
A = pt 100.0 100.0
B = pt 200.0 400.0
C = pt 400.0 200.0

AB = line A B
AC = line A C
BC = line B C

// Построим высоты
A_alt = alt_ BC A
B_alt = alt_ AC B
C_alt = alt_ AB C

// Заметим, что все высоты пересеклись в одной точке.

// Передвинем точки
set! A (pt 100.0 300.0)
set! B (pt 200.0 300.0)
set! C (pt 150.0 100.0)

// Заметим, что все высоты всё ещё пересекаются в одной точке.
